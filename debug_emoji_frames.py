#!/usr/bin/env python3
"""
Debug des frames emoji : v√©rifier si les emojis sont pr√©sents avant l'export FFmpeg
"""

import sys
from pathlib import Path
import numpy as np
from PIL import Image

def debug_emoji_frames():
    """Debug les frames avec emojis pour identifier o√π ils sont perdus"""
    
    print("üîç DEBUG FRAMES EMOJI")
    print("=" * 30)
    
    # 1. Tester notre cr√©ation de frame directement
    print("\n1Ô∏è‚É£ TEST CR√âATION FRAME PIL:")
    try:
        sys.path.append('.')
        from tiktok_subtitles import create_text_with_emoji_frame
        
        # Cr√©er une frame avec emoji
        frame = create_text_with_emoji_frame(
            "REALLY üéØ TEST", 
            None,
            (255, 255, 255),  # blanc
            1.0, 1.0, 1.0,
            (720, 1280)
        )
        
        # Sauvegarder comme image
        img = Image.fromarray(frame.astype('uint8'))
        img.save("debug_emoji_frame.png")
        
        # Compter les pixels non-noirs
        non_black = np.sum(frame > 0)
        print(f"‚úÖ Frame cr√©√©e: {non_black} pixels visibles")
        print("‚úÖ Sauv√©: debug_emoji_frame.png")
        
        # V√©rifier si l'emoji est visible
        if non_black > 1000:  # Suffisamment de pixels pour du texte
            print("‚úÖ La frame contient du contenu visible")
        else:
            print("‚ùå La frame semble vide")
            
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation frame: {e}")
        return False
    
    # 2. Tester les clips MoviePy
    print("\n2Ô∏è‚É£ TEST CLIP MOVIEPY:")
    try:
        from moviepy.editor import ImageClip, CompositeVideoClip, ColorClip
        
        # Cr√©er un clip √† partir de notre frame emoji
        emoji_clip = ImageClip(frame, duration=2.0)
        
        # V√©rifier le premier frame du clip
        test_frame = emoji_clip.get_frame(0)
        clip_pixels = np.sum(test_frame > 0)
        print(f"‚úÖ Clip MoviePy: {clip_pixels} pixels visibles")
        
        if clip_pixels > 1000:
            print("‚úÖ Le clip MoviePy preserve les emojis")
        else:
            print("‚ùå Le clip MoviePy perd les emojis")
        
        emoji_clip.close()
        
    except Exception as e:
        print(f"‚ùå Erreur clip MoviePy: {e}")
        return False
    
    # 3. Test export simple
    print("\n3Ô∏è‚É£ TEST EXPORT SIMPLE:")
    try:
        from moviepy.editor import ImageClip
        
        # Cr√©er une vid√©o test tr√®s simple
        test_clip = ImageClip(frame, duration=1.0)
        test_output = "debug_emoji_export.mp4"
        
        print("üé¨ Export en cours...")
        test_clip.write_videofile(
            test_output,
            fps=30,
            codec='libx264',
            verbose=False,
            logger=None
        )
        
        if Path(test_output).exists():
            size = Path(test_output).stat().st_size
            print(f"‚úÖ Export r√©ussi: {size} bytes")
            
            # Recharger et v√©rifier
            from moviepy.editor import VideoFileClip
            reloaded = VideoFileClip(test_output)
            reloaded_frame = reloaded.get_frame(0)
            reloaded_pixels = np.sum(reloaded_frame > 0)
            print(f"üìä Pixels apr√®s rechargement: {reloaded_pixels}")
            
            if reloaded_pixels > 1000:
                print("‚úÖ L'export preserve les emojis")
            else:
                print("‚ùå L'export fait dispara√Ætre les emojis")
            
            reloaded.close()
        else:
            print("‚ùå Export √©chou√©")
            
        test_clip.close()
        
    except Exception as e:
        print(f"‚ùå Erreur export: {e}")
        return False
    
    return True

def check_actual_video():
    """V√©rifier la derni√®re vid√©o g√©n√©r√©e"""
    
    print("\n4Ô∏è‚É£ V√âRIFICATION VID√âO R√âELLE:")
    
    # Chercher la derni√®re vid√©o g√©n√©r√©e
    output_dir = Path("output/subtitled")
    if not output_dir.exists():
        print("‚ùå Dossier output/subtitled introuvable")
        return
    
    # Trouver le fichier le plus r√©cent
    video_files = list(output_dir.glob("*.mp4"))
    if not video_files:
        print("‚ùå Aucune vid√©o trouv√©e")
        return
    
    latest_video = max(video_files, key=lambda f: f.stat().st_mtime)
    print(f"üìπ Vid√©o analys√©e: {latest_video.name}")
    
    try:
        from moviepy.editor import VideoFileClip
        
        video = VideoFileClip(str(latest_video))
        
        # Prendre plusieurs frames √† diff√©rents moments
        times = [1.0, video.duration/2, video.duration-1]
        
        for i, t in enumerate(times):
            if t < video.duration:
                frame = video.get_frame(t)
                pixels = np.sum(frame > 0)
                print(f"üìä Frame {t:.1f}s: {pixels} pixels")
                
                # Sauvegarder frame
                img = Image.fromarray(frame.astype('uint8'))
                img.save(f"debug_video_frame_{i}.png")
        
        video.close()
        print("‚úÖ Frames extraites et sauv√©es")
        
    except Exception as e:
        print(f"‚ùå Erreur analyse vid√©o: {e}")

def main():
    """Debug principal"""
    
    print("üîç DEBUG COMPLET EMOJI PIPELINE")
    print("=" * 50)
    
    success = debug_emoji_frames()
    check_actual_video()
    
    print("\nüìã R√âSUM√â:")
    if success:
        print("‚úÖ M√©thode PIL fonctionne")
        print("üîç V√©rifiez les images g√©n√©r√©es:")
        print("‚Ä¢ debug_emoji_frame.png")
        print("‚Ä¢ debug_emoji_export.mp4") 
        print("‚Ä¢ debug_video_frame_*.png")
        
        print("\nüí° PROCHAINES √âTAPES:")
        print("‚Ä¢ Ouvrir debug_emoji_frame.png")
        print("‚Ä¢ Si emojis visibles ‚Üí probl√®me export")
        print("‚Ä¢ Si emojis invisibles ‚Üí probl√®me cr√©ation")
    else:
        print("‚ùå Probl√®me dans la cr√©ation des frames")

if __name__ == "__main__":
    main() 
